---
title: Using a9s MySQL for PCF
owner: Partners
---

This topic describes how to use a9s MySQL for Pivotal Cloud Foundry (PCF) after it has been successfully
installed. For more information, see the [Installing and Configuring a9s MySQL
for PCF](./installing.html) topic.

##<a id='using'></a>Use a9s MySQL for PCF with an App

To use a9s MySQL for PCF with an app, create a service instance and bind the
service instance
to your app. For more information about managing service instances, see
<a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html" target="_blank">Managing Service Instances with the cf CLI</a>.

###<a id='view-service'></a> View the a9s MySQL for PCF Service

After the tile is installed, you can see the service `a9s-mysql101` and its
service plans appear in your PCF marketplace. Run `cf marketplace` to see the
service listing:
<pre class="terminal">
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK
service         plans                                                                           description
a9s-mysql101    mysql-single-small, mysql-single-big, mysql-cluster-small, mysql-cluster-big    This is the anynines MySQL 10 service.
</pre>

For more information about available service plans, see
[Configure Service Plans](./installing.html#configure-service-instance).

###<a id='create-instance'></a> Create a Service Instance

To provision a MySQL database, run `cf create-service`. For example.

<pre class="terminal">
$ cf create-service a9s-mysql101 mysql-single-small my-mysql-service-instance
</pre>

Depending on your infrastructure and service broker utilization, it might take
several minutes to create the service instance.

Run the `cf services` command to view the creation status. This command displays
a list of all your service instances. To view the status of a specific service
instance, run `cf service NAME-OF-YOUR-SERVICE-INSTANCE`.

### Bind an App to a Service Instance

After your database is created, run `cf bind-service` to bind the service to
your app:

<pre class="terminal">
$ cf bind-service a9s-mysql-app my-mysql-service-instance
</pre>

###<a id='restage'></a> Restage or Restart Your App

To enable your app to access the service instance, run `cf restage` or
`cf restart` to restage or restart your app.

##<a id='credentials'></a> Obtain Credentials for Accessing Your Service Instance

After a service instance is bound to an app, the credentials of your MySQL
database are stored in the environment variables of the app. Run
`cf env APP-NAME` to display the environment variables.

You can find the credentials in the
<a href="http://docs.pivotal.io/pivotalcf/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES" target="_blank">VCAP_SERVICES</a>
key.

<pre class="terminal">
$ cf env a9s-mysql-app
Getting env variables for app a9s-mysql-app in org test / space test as admin...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "a9s-mysql101": [
   {
    "credentials": {
      "name": "EXAMPLE-DATABASE-NAME"
      "host": "EXAMPLE-HOST",
      "port": 3306,
      "username": "EXAMPLE-USERNAME"
      "password": "EXAMPLE-PASSWORD",
    },
    "label": "a9s-mysql101",
    "name": "my-mysql-service-instance",
    "plan": "mysql-single-small",
   }
  ]
 }
}
...
</pre>

You can use the host and password values to connect to your database with a
MySQL client.

##<a id='deleting'></a> Delete a a9s MySQL for PCF Service Instance

<p class="note warning"><strong>WARNING</strong>: Before deleting a service
  instance, you must backup data stored in your database. This operation cannot
  be undone and all the data is lost when the service instance is deleted.</p>

Before you can delete a service instance, you must unbind it from all apps.

###<a id='list-instances'></a> List Available Services

Run `cf services` to list available services.

<pre class="terminal">
$ cf services

Getting services in org test / space test as admin...
OK

name                          service          plan                 bound apps        last operation
my-mysql-service-instance     a9s-mysql101     mysql-single-small   a9s-mysql-app     create succeeded
</pre>

This example shows that `my-mysql-service-instance` is bound to the
`a9s-mysql-app` app.

###<a id='unbind-instance'></a>Unbind a Service Instance

Run `cf unbind-service` to unbind the service from your app:

<pre class="terminal">
$ cf unbind-service a9s-mysql-app my-mysql-service-instance
</pre>

###<a id='delete-instance'></a> Delete a Service Instance

After unbinding the service, it is no longer bound to an app. Run
`cf delete-service` to delete the service:

<pre class="terminal">
$ cf delete-service my-mysql-service-instance
</pre>

It might take several minutes to delete the service. Deleting a service
deprovisions the corresponding infrastructure resources. Run the `cf services`
command to view the deletion status.

##<a id='upgrade-service-plan'></a> Upgrade the Service Instance to Another Service Plan

Once created, you can upgrade your service instance to another, larger service
plan. A larger service plan provides more CPU, RAM and storage. For more
information, see <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html#update_service" target="_blank">Update a Service Instance</a>
of the _Managing Service Instances with the cf CLI_.

<pre class="terminal">
$ cf update-service my-mysql-service-instance -p a-bigger-plan
</pre>

Here are the plans you can upgrade to depending on the one you are currently
using:

* If you are currently using the `mysql-single-small` plan, you can upgrade to
`mysql-single-big` plan.
* If you are currently using the `mysql-replica-small` plan, you can upgrade
to `mysql-replica-big` plan.

##<a id='add-graphite-endpoint'></a>Add a Graphite Endpoint

If you want to monitor your service with Graphite, you can set an endpoint to
where to information will be sent with the `cf update-service` command. This
command expects the <a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html#arbitrary-params-update" target="_blank">-c flag</a>
and a JSON string containing the `graphite` and `metrics_prefix` keys.

<pre class="terminal">
$ cf update-service my-mysql-service-instance -c '{ "graphite": ["yourspace.your-graphite-endpoint.com:12345"], "metrics_prefix": "your-api-key.my-mysql" }'
</pre>

##<a id='add-syslog-endpoint'></a>Add a Syslog Endpoint

The `cf update-service` command used with the
<a href="http://docs.pivotal.io/pivotalcf/devguide/services/managing-services.html#arbitrary-params-update" target="_blank">-c flag</a>
can let you stream your syslog to a third-party service. In this case, the
command expects a JSON string containing the `syslog` key.

<pre class="terminal">
$ cf update-service my-mysql-service-instance -c '{ "syslog": ["logs4.your-syslog-endpoint.com:54321"] }'
</pre>
