---
title: Using a9s MySQL for PCF
owner: Partners
---

This topic describes how to use a9s MySQL for Pivotal Cloud Foundry (PCF) after it has been successfully installed. For more information, see the [Installing and Configuring a9s MySQL
for PCF](./installing.html) topic.


##  <a id='use-a9s-mysql-with-an-application'></a> Use a9s MySQL with an Application

To use a9s MySQL with an application, create a service instance and bind the service instance to your app. For more information about managing service instances, see [Managing Service Instances with the cf CLI](https://docs.cloudfoundry.org/devguide/services/managing-services.html).

### <a id='view-the-a9s-mysql-service'></a> View the a9s MySQL Service

After the service is installed, you can see the `a9s-mysql` and its service plans appear in your CF marketplace. Run `cf marketplace` to see the service listing:
```bash
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK
service      plans                                           description
a9s-mysql  mysql-single-small, mysql-cluster-small,    This is the anynines MySQL service.
           mysql-single-big, mysql-cluster-big
```

### <a id='create-a-service-instance'></a> Create a Service Instance

To provision a MySQL database, run `cf create-service`.

```bash
$ cf create-service a9s-mysql mysql-single-small my-mysql-service
```

Depending on your infrastructure and service broker utilization, it may take several minutes to create the service instance.

Run `cf services` to view the creation status. This command displays a list of all your service instances. To view the status of a specific service instance, run `cf service NAME-OF-YOUR-SERVICE`.

### <a id='bind-an-application-to-a-service-instance'></a> Bind an Application to a Service Instance

After your database is created, run `cf bind-service` to bind the service to your application:

```bash
$ cf bind-service a9s-mysql-app my-mysql-service
```

### <a id='restage-or-restart-your-application'></a> Restage or Restart Your Application

To enable your application to access the service instance, run `cf restage` or `cf restart` to restage or restart your application.

## <a id='obtain-service-instance-access-credentials'></a> Obtain Service Instance Access Credentials

After a service instance is bound to an application, the credentials of your MySQL database are stored in the environment variables of the application. Run `cf env APP-NAME` to display the environment variables.

You can find the credentials in the [VCAP_SERVICES](https://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES) key.

```bash
$ cf env a9s-mysql-app
Getting env variables for app a9s-mysql-app in org test / space test as admin...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "a9s-mysql": [
   {
     "credentials": {
      "dns_servers": [
       "10.0.4.13",
       "10.0.5.5",
       "10.0.6.5"
      ],
      "host": "d566e59.service.dc1.a9s-mysql-consul",
      "host_ip": "10.0.10.4",
      "host_ips": [
       "10.0.8.4",
       "10.0.9.4",
       "10.0.10.4"
      ],
      "hosts": [
       "d566e59-mysql-0.node.dc1.a9s-mysql-consul",
       "d566e59-mysql-1.node.dc1.a9s-mysql-consul",
       "d566e59-mysql-2.node.dc1.a9s-mysql-consul"
      ],
      "name": "d566e59",
      "password": "a9s-password",
      "port": 3306,
      "uri": "mysql://a9s-brk-usr:a9s-password@d566e59.service.dc1.a9s-mysql-consul:3306/d566e59",
      "username": "a9s-brk-usr"
     },
     "instance_name": "mymysql",
     "label": "a9s-mysql101",
     "name": "mymysql",
     "plan": "mysql-cluster-small",
     "provider": null,
     "syslog_drain_url": null,
     "tags": [
      "sql",
      "database",
      "object-relational",
      "consistent"
    ]
   }
  ]
 }
}
...
```

You can use the host_ips, username, and password values to connect to your database with a MySQL client.

a9s MySQL for PCF comes with its own Consul cluster to provide hostname resolving. When your DNS is configured to resolve the a9s MySQL for PCF service instance domains, you can make use of `hosts` or `uri`. For more information, see [Name Resolving With Consul](./installing.html#name-resolving-with-consul).


## <a id='delete-an-a9s-mysql-service-instance'></a> Delete an a9s MySql Service Instance

<p class='note warning'><strong>WARNING:</strong> Before deleting a service instance, you must back up data stored in your database. This operation cannot be undone and all the data is lost when the service is deleted.</p>

Before you can delete a service instance, you must unbind it from all apps.

### <a id='list-available-services'></a> List Available Services

Run `cf services` to list your available services.

```bash
$ cf services

Getting services in org test / space test as admin...
OK

name               service     plan                 bound apps      last operation
my-mysql-service   a9s-mysql   mysql-single-small   a9s-mysql-app   create succeeded
```

This example shows that `my-mysql-service` is bound to the `a9s-mysql-app` application.

### <a id='unbind-a-service-instance'></a> Unbind a Service Instance

Run `cf unbind-service` to unbind the service from your application.

```bash
$ cf unbind-service a9s-mysql-app my-mysql-service
```

### <a id='delete-a-service-instance'></a> Delete a Service Instance

After unbinding the service, it is no longer bound to an application. Run `cf delete-service` to delete the service:

```bash
$ cf delete-service my-mysql-service
```

It may take several minutes to delete the service. Deleting a service deprovisions the corresponding infrastructure resources.
Run the `cf services` command to view the deletion status.


## <a id='upgrade-the-service-instance-to-another-service-plan'></a> Upgrade the Service Instance to Another Service Plan

Once created, you can upgrade your service instance to another, larger service plan. A larger service plan provides more CPU, RAM, and storage. For more information, see the [Update a Service Instance](https://docs.cloudfoundry.org/devguide/services/managing-services.html#update_service) of the _Managing Service Instances with the cf CLI_ topic.

```bash
$ cf update-service my-mysql-service -p a-bigger-plan
```

Here are the plans you can upgrade to, depending on the one you are currently using:

| Base Plan | Target Plan |
|------|-----------|
| mysql-single-small | mysql-single-medium <br> mysql-single-big <br> mysql-cluster-small <br> mysql-cluster-medium <br> mysql-cluster-big |
| mysql-single-medium | mysql-single-big <br> mysql-cluster-medium <br> mysql-cluster-big |
| mysql-single-big | mysql-cluster-big |
| mysql-cluster-small | mysql-cluster-medium <br> mysql-cluster-big |
| mysql-cluster-medium | mysql-cluster-big |


## <a id='add-a-graphite-endpoint'></a> Add a Graphite Endpoint

If you want to monitor your service with Graphite, you can set an endpoint to where to information will be sent with the `cf update-service` command. This command expects the [-c flag](https://docs.cloudfoundry.org/devguide/services/managing-services.html#arbitrary-params-binding) and a JSON string containing the `graphite` and `metrics_prefix` keys. Depending on your Graphite provider, the `metrics_prefix` might require that each metric must start with an API key in their name. You can also change the interval when the data is send to the endpoint. To do this, modify `interval`; the default is 10s.

```bash
$ cf update-service my-mysql-service -c '{ "graphite": ["yourspace.your-graphite-endpoint.com:12345"], "metrics_prefix": "your-api-key.my-cluster-mysql", "interval": "5"}'
```


## <a id='add-a-syslog-endpoint'></a> Add a Syslog Endpoint

The `cf update-service` command used with the [-c flag](https://docs.cloudfoundry.org/devguide/services/managing-services.html#arbitrary-params-binding) can let you stream your syslog to a third-party service. In this case, the command expects a JSON string containing the `syslog` key. You can also change the interval for the syslog with the same key than for the Graphite endpoint `interval`.

```bash
$ cf update-service my-mysql-service -c '{ "syslog": ["logs4.your-syslog-endpoint.com:54321"], "interval": "5" }'
```


## <a id='cloud-foundry-application-security-groups'></a> Cloud Foundry Application Security Groups

This section describes how to check whether a security group was created.

Each a9s Data Service will automatically create and update Cloud Foundry security groups in order to protected service instances to be accessed by applications not running in the same Cloud Foundry applications space. For more information about Security Groups, see [Understanding Application Security Groups](https://docs.cloudfoundry.org/concepts/asg.html).

### <a id='get-service-instance-guid'></a> Get Service Instance GUID

To get the GUID of the service instance, run `cf service INSTANCE_NAME --guid`.

```bash
$ cf service my-mysql --guid
ca16f111-5073-40b7-973a-156c75dd3028
```

### <a id='check-available-security-groups'></a> Check Available Security Groups

To see all available security groups, run `cf security-groups`.

```
$cf security-groups
Getting security groups as demo@anynines.com
OK

     Name                                         Organization     Space
#0   public_networks
#1   dns
#2   tcp_open
#3   guard_432fb752-876d-443b-a311-a075f4df2237   demonstrations   demo
#4   guard_ca16f111-5073-40b7-973a-156c75dd3028   demonstrations   demo
```

There you can see a security group with the name `guard_ca16f111-5073-40b7-973a-156c75dd3028` was successfully created.

<p class='note'><strong>Note:</strong> In some circumstances, the connection between the application and the service instance is not possible. In this case, check to see if a security group was created.</p>


## <a id='backup-and-restore-service-instances'></a> Backup and Restore Service Instances

a9s MySQL provides an easy way to create backups and restore if needed.

### <a id='get-dashboard-address-login-and-authorize'></a> Get Dashboard Address, Log In, and Authorize

1. Grap the dashboard URL with `cf service SERVICE-NAME`.
  ```bash
  $cf service my-mysql

  Service instance: my-mysql
  Service: a9s-mysql
  Bound apps:
  Tags:
  Plan: mysql-single-small
  Description: This is a service creating and managing dedicated MySQL service instances and clusters, powered by the anynines Service Framework
  Documentation url:
  Dashboard: https://a9s-mysql-dashboard.aws.ie.a9s.eu/service-instances/ca16f111-5073-40b7-973a-156c75dd3028

  Last Operation
  Status: update succeeded
  Message:
  Started: 2017-10-26T08:28:38Z
  Updated: 2017-10-26T08:28:38Z
  ```

1. Browse to the dashboard URL and authenticate on the redirected page with your Cloud Foundry credentials: 

1. Click **Authorize** to approve the authorization request. 

### <a id='perform-a-backup'></a> Perform a Backup

On the dashboard, you can trigger a backup by clicking **Trigger backup**.

![service-dashboard](images/service-dashboard.png)

After a short period of time the backup will be queued and the backup process will soon start.

![service-dashboard](images/service-dashboard-bkp-triggered.png)

<p class='note'><strong>Note:</strong> Depending on the size of the data, the backup will take some time.</p>

### <a id='restore-a-backup'></a> Restore a Backup

1. Open the dashboard again and select the backup you would like to restore.

1. Click **Restore** and wait for the restore to trigger.

![service-dashboard](images/service-dashboard-restore-triggered.png)

<p class='note'><strong>Note:</strong> Depending on the size of the data, the restore will take some time.</p>

![service-dashboard](images/service-dashboard-final.png)


## <a id='make-a-service-instance-locally-available'></a> Make a Service Instance Locally Available

You can access any of the a9s Data Services locally and connect with a local client to the service for any purpose, such as debugging. Cloud Foundry provides a smart way to create SSH forward tunnels through a pushed application. For more information about this feature, see the [Accessing Apps with SSH](https://docs.cloudfoundry.org/devguide/deploy-apps/ssh-apps.html) section of the Cloud Foundry documentation.

First, you must have an application bound to the service. To do this, see [Bind an Application to a Service Instance](#bind-an-application-to-a-service-instance).

<p class='note'><strong>Note:</strong> `cf ssh` support must be enabled in the platform. Your administrator can tell you whether it is enabled.</p>

### <a id='get-the-service-url-and-credentials'></a> Get the Service URL and Credentials

You must first follow the procedure in [Obtain Service Instance Access Credentials](#obtain-service-instance-access-credentials) to get the hostname of the service and the user credentials.

```bash
$ cf env a9s-mysql-app
Getting env variables for app a9s-mysql-app in org test / space test as admin...
OK

System-Provided:
{
  "VCAP_SERVICES": {
   "a9s-mysql": [
    {
      "credentials": {
       "dns_servers": [
        "10.0.4.13",
        "10.0.5.5",
        "10.0.6.5"
       ],
       "host": "d566e59.service.dc1.a9s-mysql-consul",
       "host_ip": "10.0.10.4",
       "host_ips": [
        "10.0.8.4",
        "10.0.9.4",
        "10.0.10.4"
       ],
       "hosts": [
        "d566e59-mysql-0.node.dc1.a9s-mysql-consul",
        "d566e59-mysql-1.node.dc1.a9s-mysql-consul",
        "d566e59-mysql-2.node.dc1.a9s-mysql-consul"
       ],
       "name": "d566e59",
       "password": "a9s-password",
       "port": 3306,
       "uri": "mysql://a9s-brk-usr:a9s-password@d566e59.service.dc1.a9s-mysql-consul:3306/d566e59",
       "username": "a9s-brk-usr"
      },
      "instance_name": "mymysql",
      "label": "a9s-mysql101",
      "name": "mymysql",
      "plan": "mysql-cluster-small",
      "provider": null,
      "syslog_drain_url": null,
      "tags": [
       "sql",
       "database",
       "object-relational",
       "consistent"
     ]
    }
   ]
  }
}
...
```

Note the host `d566e59.service.dc1.a9svs`, the username `a9s-brk-usr`, and the password `a9s-password`. You will need these in the next step.

### <a id='create-a-tunnel-to-the-service'></a> Create a Tunnel to The Service

With `cf ssh`,  you can create am SSH forward tunnel to the management dashboard. Use port `3306` to connect to the a9s MySQL instance.

```bash
$ cf ssh a9s-mysql-app -L 3306:d67901c.service.dc1.a9svs:3306
vcap@956aaf4e-6da9-4f69-4b1d-8e631a403312:~$
```

When the SSH tunnel is open, you can access the instance using the address `localhost:3306`.

<p class='note'><strong>Note:</strong> Be sure to close the session by running <code>exit</code>.</p>


## <a id="service-keys"></a> Service keys

To gain access to the service manually rather than binding apps to it, you can use service keys.

### <a id="create-a-service-key"></a> Creating a Service Key

To create a key to the service instance `mysql1` call `nykey`, run the following command:

```bash
cf create-service-key mysql1 mykey
```

### <a id="listing-service-keys"></a> Listing Service Keys

To list all the keys for the `mysql1` service instance, run the following command:

```bash
cf service-keys mysql1
```

### <a id="accessing-service-keys"></a> Accessing Service Keys

To obtain the key `mykey` from the `mysql1` service instance, run the following command:

```bash
cf service-key mysql1 mykey
```

### <a id="deleting-service-keys"></a> Deleting Service Keys

To delete a service key `mykey` from the service instance `mysql1`, run the following command:

```bash
cf delete-service-key mysql1 mykey
```
